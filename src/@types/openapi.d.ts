/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/telemetry/{deviceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload telemetry data */
        post: operations["createTelemetry"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        PostTelemetry: {
            /** Format: date-time */
            date: string;
            location: components["schemas"]["Location"];
            battery: components["schemas"]["Battery"];
            sensors: components["schemas"]["Sensors"];
            cellular: components["schemas"]["Cellular"];
        };
        GetTelemetry: {
            id: string;
            /** Format: date-time */
            date: string;
            location: components["schemas"]["Location"];
            battery: components["schemas"]["Battery"];
            sensors: components["schemas"]["Sensors"];
            cellular: components["schemas"]["Cellular"];
        };
        Battery: {
            voltage: number | null;
            current: number | null;
            temperature: number | null;
            level: number | null;
            charging: boolean | null;
        };
        Location: {
            latitude?: number | null;
            longitude?: number | null;
            speed?: number | null;
            accuracy?: number | null;
            altitude?: number | null;
            provider?: string | null;
            /** Format: date-time */
            timestamp?: string | null;
            timeToFix?: number | null;
            bearing?: number | null;
        };
        Sensors: {
            barometer: number | null;
            light?: number | null;
            proximity?: number | null;
        };
        Cellular: {
            networkType: string | null;
            signalStrength: number | null;
            cellId?: string | null;
            mcc?: string | null;
            mnc?: string | null;
        };
        Error: {
            /**
             * Format: int32
             * @description The HTTP status code
             */
            code: number;
            /** @description The error */
            message: string;
        };
        /** @description An HTTP Problem Details object, as defined in IETF RFC 7807 (https://tools.ietf.org/html/rfc7807). */
        Problem: {
            /** @description The details of the problem */
            detail?: string;
            /** @description The HTTP status code */
            status: number;
            /** @description The type of error (text) */
            title: string;
            /** @description The type of error (URL) */
            type?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    createTelemetry: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The device ID */
                deviceId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostTelemetry"][];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description The request has failed. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                    "application/problem+json": components["schemas"]["Problem"];
                };
            };
        };
    };
}
